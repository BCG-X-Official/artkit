{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ac8d44a2e5195b3",
   "metadata": {},
   "source": [
    "# Advanced Design Patterns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ee368af-fe94-46a4-9cf0-44abcd9ef086",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "The goal of this notebook is to introduce some advanced ARTKIT design patterns that you may find useful in your own projects.\n",
    "\n",
    "We'll cover how to:\n",
    "\n",
    "- Reference arguments across multiple steps\n",
    "- Create parallel steps from iterables\n",
    "- Work with multiple system prompts\n",
    "- Work with historicized chats\n",
    "  \n",
    "New users should start with the ARTKIT setup guide on the documentation [Home page](../../_generated/home.rst#installation) and the introductory tutorial [Building Your First ARTKIT Pipeline](../introduction_to_artkit/building_your_first_artkit_pipeline.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd306dd1-205f-4611-a06c-da540d71a0db",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Below, we import the required libraries, load environment variables, set the logging level to WARNING, and configure `pandas` to display dataframes with wide columns (this is helpful for displaying long strings)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "10b0d2e7-a9fd-4084-b16c-cb011687d104",
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "import artkit.api as ak\n",
    "\n",
    "# Load API key from .env file\n",
    "load_dotenv()\n",
    "\n",
    "logging.basicConfig(level=logging.WARNING)\n",
    "\n",
    "pd.set_option(\"display.max_colwidth\", None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd0f81d2",
   "metadata": {},
   "source": [
    "Seed the notebook and initialize a cached and seeded LLM model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0ac8ceb0-5468-4a40-8bbb-410e14694f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(0)\n",
    "\n",
    "chat_llm = ak.CachedChatModel(\n",
    "    model=ak.OpenAIChat(\n",
    "        model_id=\"gpt-4o\",\n",
    "        temperature=0.2,\n",
    "        seed=0,\n",
    "    ), \n",
    "    database=\"cache/advanced_design_patterns.db\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "389e008cba5417f1",
   "metadata": {},
   "source": [
    "## Using arguments across steps\n",
    "\n",
    "ARTKIT flows pass parameters between steps by name. In most cases, the output of one step becomes the input into the following step. This is not strictly necessary: a step can reference outputs from _any_ previous step in the flow. This can be useful if you need to reuse outputs from one step in multiple places. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1854016d-3f0a-4e7f-8b8a-45f7b4e08040",
   "metadata": {},
   "source": [
    "In this toy example, we use two chained steps to calculate `(a+b)*a`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "20fe4c2c-32ef-4a9c-acad-abef441993e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">input</th>\n",
       "      <th>add</th>\n",
       "      <th>multiply</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     input    add multiply\n",
       "         a  b   c   result\n",
       "item                      \n",
       "0        2  5   7       14"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flow = ak.chain(\n",
    "    ak.step(\"add\", lambda a, b: {\"c\": a+b}),\n",
    "    ak.step(\"multiply\", lambda a, c: {\"result\": a*c}),\n",
    ")\n",
    "\n",
    "ak.run(steps=flow, input=[{\"a\": 2, \"b\": 5}]).to_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c95912b2-8f81-4a81-ad1e-3c36dc25122c",
   "metadata": {},
   "source": [
    "However, be sure to carefully track which parameters are being used across steps. Suppose we add another step to our pipeline - what will it return?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e1a2af6b-f91e-42e3-b347-06f3cafe7ddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">input</th>\n",
       "      <th>add</th>\n",
       "      <th>multiply1</th>\n",
       "      <th>multiply2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>a</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     input    add multiply1 multiply2\n",
       "         a  b   c         a    result\n",
       "item                                 \n",
       "0        2  5   7        14        98"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flow = ak.chain(\n",
    "    ak.step(\"add\", lambda a, b: {\"c\": a+b}),\n",
    "    ak.step(\"multiply1\", lambda a, c: {\"a\": a*c}),\n",
    "    ak.step(\"multiply2\", lambda a, c: {\"result\": a*c}),\n",
    ")\n",
    "\n",
    "ak.run(steps=flow, input=[{\"a\": 2, \"b\": 5}]).to_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3afcfba-2a64-4bff-bebf-698f2407888a",
   "metadata": {},
   "source": [
    "From the output of our flow, its clear that we've overwritten the original input value of `a`; this might have been harder to spot if our step functions were more complicated. As a best practice, you should avoid reusing output variable names."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4ab1a02-15ff-4afd-a634-aa24f6295592",
   "metadata": {},
   "source": [
    "## Parallel steps from iterables\n",
    "\n",
    "Instead of writing out a long list of parallel steps, you can initialize them with an iterable such as a list. This can be handy if you want to apply the same transformation function with different argument values to an input, e.g., applying multiple tone augmentations to the same input prompt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "53e401f6-4323-4852-9575-4ab1783d4d4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 10.0.1 (20240210.2158)\n",
       " -->\n",
       "<!-- Title: Flow Pages: 1 -->\n",
       "<svg width=\"246pt\" height=\"300pt\"\n",
       " viewBox=\"0.00 0.00 245.94 300.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 296)\">\n",
       "<title>Flow</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"none\" points=\"-4,4 -4,-296 241.94,-296 241.94,4 -4,4\"/>\n",
       "<!-- Step_6352937488 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>Step_6352937488</title>\n",
       "<path fill=\"#43fda2\" stroke=\"#30c1d7\" d=\"M95.38,-248.5C95.38,-248.5 125.38,-248.5 125.38,-248.5 131.38,-248.5 137.38,-254.5 137.38,-260.5 137.38,-260.5 137.38,-279.5 137.38,-279.5 137.38,-285.5 131.38,-291.5 125.38,-291.5 125.38,-291.5 95.38,-291.5 95.38,-291.5 89.38,-291.5 83.38,-285.5 83.38,-279.5 83.38,-279.5 83.38,-260.5 83.38,-260.5 83.38,-254.5 89.38,-248.5 95.38,-248.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"110.38\" y=\"-278\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">print</text>\n",
       "<polyline fill=\"none\" stroke=\"#30c1d7\" points=\"83.38,-270 137.38,-270\"/>\n",
       "<text text-anchor=\"start\" x=\"91.38\" y=\"-256.5\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">val=2</text>\n",
       "</g>\n",
       "<!-- _EndNode_6376942928 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>_EndNode_6376942928</title>\n",
       "<ellipse fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" cx=\"205.66\" cy=\"-146\" rx=\"28.28\" ry=\"28.28\"/>\n",
       "<ellipse fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" cx=\"205.66\" cy=\"-146\" rx=\"32.28\" ry=\"32.28\"/>\n",
       "<text text-anchor=\"middle\" x=\"205.66\" y=\"-139.75\" font-family=\"Monaco, Consolas, monospace\" font-size=\"20.00\" fill=\"#30c1d7\">||</text>\n",
       "</g>\n",
       "<!-- Step_6352937488&#45;&gt;_EndNode_6376942928 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>Step_6352937488&#45;&gt;_EndNode_6376942928</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M130.04,-248.14C132.54,-245.1 135.04,-241.99 137.38,-239 151.85,-220.43 167.29,-199.2 179.73,-181.71\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"182.51,-183.85 185.43,-173.66 176.79,-179.8 182.51,-183.85\"/>\n",
       "</g>\n",
       "<!-- Step_6352933712 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>Step_6352933712</title>\n",
       "<path fill=\"#43fda2\" stroke=\"#30c1d7\" d=\"M95.38,-186.5C95.38,-186.5 125.38,-186.5 125.38,-186.5 131.38,-186.5 137.38,-192.5 137.38,-198.5 137.38,-198.5 137.38,-217.5 137.38,-217.5 137.38,-223.5 131.38,-229.5 125.38,-229.5 125.38,-229.5 95.38,-229.5 95.38,-229.5 89.38,-229.5 83.38,-223.5 83.38,-217.5 83.38,-217.5 83.38,-198.5 83.38,-198.5 83.38,-192.5 89.38,-186.5 95.38,-186.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"110.38\" y=\"-216\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">print</text>\n",
       "<polyline fill=\"none\" stroke=\"#30c1d7\" points=\"83.38,-208 137.38,-208\"/>\n",
       "<text text-anchor=\"start\" x=\"91.38\" y=\"-194.5\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">val=3</text>\n",
       "</g>\n",
       "<!-- Step_6352933712&#45;&gt;_EndNode_6376942928 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>Step_6352933712&#45;&gt;_EndNode_6376942928</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M137.86,-190.4C147.41,-184.05 158.36,-176.77 168.59,-169.97\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"170.46,-172.93 176.85,-164.48 166.59,-167.1 170.46,-172.93\"/>\n",
       "</g>\n",
       "<!-- _StartNode_6377427856 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>_StartNode_6377427856</title>\n",
       "<ellipse fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" cx=\"23.69\" cy=\"-146\" rx=\"23.69\" ry=\"23.69\"/>\n",
       "<text text-anchor=\"middle\" x=\"23.69\" y=\"-139.75\" font-family=\"Monaco, Consolas, monospace\" font-size=\"20.00\" fill=\"#30c1d7\">&gt;</text>\n",
       "</g>\n",
       "<!-- _StartNode_6377427856&#45;&gt;Step_6352937488 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>_StartNode_6377427856&#45;&gt;Step_6352937488</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M36.52,-166.47C47.87,-185.67 65.82,-214.94 83.38,-239 83.45,-239.1 83.52,-239.19 83.59,-239.29\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"80.73,-241.31 89.61,-247.08 86.26,-237.03 80.73,-241.31\"/>\n",
       "</g>\n",
       "<!-- _StartNode_6377427856&#45;&gt;Step_6352933712 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>_StartNode_6377427856&#45;&gt;Step_6352933712</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M43.48,-159.76C52.45,-166.33 63.49,-174.41 73.95,-182.06\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"71.57,-184.66 81.7,-187.74 75.7,-179.01 71.57,-184.66\"/>\n",
       "</g>\n",
       "<!-- Step_6352941712 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>Step_6352941712</title>\n",
       "<path fill=\"#43fda2\" stroke=\"#30c1d7\" d=\"M95.38,-124.5C95.38,-124.5 125.38,-124.5 125.38,-124.5 131.38,-124.5 137.38,-130.5 137.38,-136.5 137.38,-136.5 137.38,-155.5 137.38,-155.5 137.38,-161.5 131.38,-167.5 125.38,-167.5 125.38,-167.5 95.38,-167.5 95.38,-167.5 89.38,-167.5 83.38,-161.5 83.38,-155.5 83.38,-155.5 83.38,-136.5 83.38,-136.5 83.38,-130.5 89.38,-124.5 95.38,-124.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"110.38\" y=\"-154\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">print</text>\n",
       "<polyline fill=\"none\" stroke=\"#30c1d7\" points=\"83.38,-146 137.38,-146\"/>\n",
       "<text text-anchor=\"start\" x=\"91.38\" y=\"-132.5\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">val=1</text>\n",
       "</g>\n",
       "<!-- _StartNode_6377427856&#45;&gt;Step_6352941712 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>_StartNode_6377427856&#45;&gt;Step_6352941712</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M47.83,-146C55.13,-146 63.41,-146 71.46,-146\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"71.46,-149.5 81.46,-146 71.46,-142.5 71.46,-149.5\"/>\n",
       "</g>\n",
       "<!-- Step_6352943248 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>Step_6352943248</title>\n",
       "<path fill=\"#43fda2\" stroke=\"#30c1d7\" d=\"M95.38,-62.5C95.38,-62.5 125.38,-62.5 125.38,-62.5 131.38,-62.5 137.38,-68.5 137.38,-74.5 137.38,-74.5 137.38,-93.5 137.38,-93.5 137.38,-99.5 131.38,-105.5 125.38,-105.5 125.38,-105.5 95.38,-105.5 95.38,-105.5 89.38,-105.5 83.38,-99.5 83.38,-93.5 83.38,-93.5 83.38,-74.5 83.38,-74.5 83.38,-68.5 89.38,-62.5 95.38,-62.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"110.38\" y=\"-92\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">print</text>\n",
       "<polyline fill=\"none\" stroke=\"#30c1d7\" points=\"83.38,-84 137.38,-84\"/>\n",
       "<text text-anchor=\"start\" x=\"91.38\" y=\"-70.5\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">val=0</text>\n",
       "</g>\n",
       "<!-- _StartNode_6377427856&#45;&gt;Step_6352943248 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>_StartNode_6377427856&#45;&gt;Step_6352943248</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M43.48,-132.24C52.45,-125.67 63.49,-117.59 73.95,-109.94\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"75.7,-112.99 81.7,-104.26 71.57,-107.34 75.7,-112.99\"/>\n",
       "</g>\n",
       "<!-- Step_6352940496 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>Step_6352940496</title>\n",
       "<path fill=\"#43fda2\" stroke=\"#30c1d7\" d=\"M95.38,-0.5C95.38,-0.5 125.38,-0.5 125.38,-0.5 131.38,-0.5 137.38,-6.5 137.38,-12.5 137.38,-12.5 137.38,-31.5 137.38,-31.5 137.38,-37.5 131.38,-43.5 125.38,-43.5 125.38,-43.5 95.38,-43.5 95.38,-43.5 89.38,-43.5 83.38,-37.5 83.38,-31.5 83.38,-31.5 83.38,-12.5 83.38,-12.5 83.38,-6.5 89.38,-0.5 95.38,-0.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"110.38\" y=\"-30\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">print</text>\n",
       "<polyline fill=\"none\" stroke=\"#30c1d7\" points=\"83.38,-22 137.38,-22\"/>\n",
       "<text text-anchor=\"start\" x=\"91.38\" y=\"-8.5\" font-family=\"Monaco, Consolas, monospace\" font-size=\"10.00\" fill=\"#000000\">val=4</text>\n",
       "</g>\n",
       "<!-- _StartNode_6377427856&#45;&gt;Step_6352940496 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>_StartNode_6377427856&#45;&gt;Step_6352940496</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M36.52,-125.53C47.87,-106.33 65.82,-77.06 83.38,-53 83.45,-52.9 83.52,-52.81 83.59,-52.71\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"86.26,-54.97 89.61,-44.92 80.73,-50.69 86.26,-54.97\"/>\n",
       "</g>\n",
       "<!-- Step_6352941712&#45;&gt;_EndNode_6376942928 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>Step_6352941712&#45;&gt;_EndNode_6376942928</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M137.86,-146C145.33,-146 153.65,-146 161.82,-146\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"161.64,-149.5 171.64,-146 161.64,-142.5 161.64,-149.5\"/>\n",
       "</g>\n",
       "<!-- Step_6352943248&#45;&gt;_EndNode_6376942928 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>Step_6352943248&#45;&gt;_EndNode_6376942928</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M137.86,-101.6C147.41,-107.95 158.36,-115.23 168.59,-122.03\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"166.59,-124.9 176.85,-127.52 170.46,-119.07 166.59,-124.9\"/>\n",
       "</g>\n",
       "<!-- Step_6352940496&#45;&gt;_EndNode_6376942928 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>Step_6352940496&#45;&gt;_EndNode_6376942928</title>\n",
       "<path fill=\"none\" stroke=\"#30c1d7\" stroke-dasharray=\"5,2\" d=\"M130.04,-43.86C132.54,-46.9 135.04,-50.01 137.38,-53 151.85,-71.57 167.29,-92.8 179.73,-110.29\"/>\n",
       "<polygon fill=\"#30c1d7\" stroke=\"#30c1d7\" points=\"176.79,-112.2 185.43,-118.34 182.51,-108.15 176.79,-112.2\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.sources.Source at 0x17c1fd390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "flow = ak.parallel(\n",
    "    [ak.step(\"print\", lambda val: print(val), val=val) for val in range(5)]\n",
    ")\n",
    "flow.draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15675721-5bf9-463b-9bb5-96ef9b3a4b80",
   "metadata": {},
   "source": [
    "## Multiple system prompts\n",
    "\n",
    "Once you've initialized a model, you can set its system prompt at any time using `with_system_prompt`. This is commonly useful if you're using RAG and you need to adjust the system prompt of your model with retrieved content.\n",
    "\n",
    "In this example, we can prompt our model to respond to an input message based on a randomly generated content value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e236b37-a599-4d0f-bd18-7cd2aa9ec032",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>input</th>\n",
       "      <th>repeat_content</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>message</th>\n",
       "      <th>response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hello, world!</td>\n",
       "      <td>Hello, world!\n",
       "Hello, world!</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              input               repeat_content\n",
       "            message                     response\n",
       "item                                            \n",
       "0     Hello, world!  Hello, world!\n",
       "Hello, world!"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def retrieve_content():\n",
    "    return np.random.randint(2, 5)\n",
    "\n",
    "async def repeat_content(message: str, model: ak.ChatModel):\n",
    "    content = retrieve_content()\n",
    "    sys_prompt = f\"Repeat the user's message {content} times.\"\n",
    "    for response in await model.with_system_prompt(sys_prompt).get_response(message=message):\n",
    "        yield {\"response\": response}\n",
    "\n",
    "ak.run(\n",
    "    steps=ak.step(\"repeat_content\", repeat_content, model=chat_llm), \n",
    "    input=[{\"message\": \"Hello, world!\"}]\n",
    ").to_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48b022c5-d066-4ba2-9229-8dd494144068",
   "metadata": {},
   "source": [
    "A model can only have one system prompt, so be careful that you're not unintentionally overwriting it. In the below example, we introduce the `french_chat_llm`, which is prompted to only respond in French. However, when we call `repeat_content`, its system prompt is overwritten and it responds in English. \n",
    "\n",
    "Note that `french_chat_llm`'s system prompt was modified within the scope of the `repeat_content` step. If we pass it to another step, it will use its original system prompt.\n",
    "\n",
    "Similarly, note that `french_chat_llm` is a copy of our original `chat_llm`. The original model's system prompt is unchanged."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "77d51b50-381d-45dd-bd12-9bea559e08fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>input</th>\n",
       "      <th>repeat_content</th>\n",
       "      <th>translate_response1</th>\n",
       "      <th>translate_response2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>message</th>\n",
       "      <th>response</th>\n",
       "      <th>response</th>\n",
       "      <th>response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hello, world!</td>\n",
       "      <td>Hello, world!\n",
       "Hello, world!\n",
       "Hello, world!</td>\n",
       "      <td>Bonjour, le monde !\n",
       "Bonjour, le monde !\n",
       "Bonjour, le monde !</td>\n",
       "      <td>In English, \"Bonjour, le monde !\" translates to \"Hello, world !\". So, your sentences would be:\n",
       "\n",
       "1. Hello, world !\n",
       "2. Hello, world !\n",
       "3. Hello, world !\n",
       "\n",
       "If you need any further assistance with translations or anything else, feel free to ask!</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              input                             repeat_content  \\\n",
       "            message                                   response   \n",
       "item                                                             \n",
       "0     Hello, world!  Hello, world!\n",
       "Hello, world!\n",
       "Hello, world!   \n",
       "\n",
       "                                              translate_response1  \\\n",
       "                                                         response   \n",
       "item                                                                \n",
       "0     Bonjour, le monde !\n",
       "Bonjour, le monde !\n",
       "Bonjour, le monde !   \n",
       "\n",
       "                                                                                                                                                                                                                                  translate_response2  \n",
       "                                                                                                                                                                                                                                             response  \n",
       "item                                                                                                                                                                                                                                                   \n",
       "0     In English, \"Bonjour, le monde !\" translates to \"Hello, world !\". So, your sentences would be:\n",
       "\n",
       "1. Hello, world !\n",
       "2. Hello, world !\n",
       "3. Hello, world !\n",
       "\n",
       "If you need any further assistance with translations or anything else, feel free to ask!  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "async def translate_response(response: str, model: ak.ChatModel):\n",
    "    user_message = f\"How do I say {response}?\"\n",
    "    for response in await model.get_response(message=user_message):\n",
    "        yield {\"response\": response}\n",
    "\n",
    "\n",
    "french_chat_llm = chat_llm.with_system_prompt(\"You only respond in French.\")\n",
    "flow = ak.chain(\n",
    "    # Careful! The \"repeat_content\" function calls the model after updating its system prompt\n",
    "    ak.step(\"repeat_content\", repeat_content, model=french_chat_llm), \n",
    "    \n",
    "    # The \"translate_response\" function calls the model without updating its system prompt\n",
    "    ak.step(\"translate_response1\", translate_response, model=french_chat_llm),\n",
    "    \n",
    "    # Our original \"chat_llm\" model object does not have a system prompt set\n",
    "    ak.step(\"translate_response2\", translate_response, model=chat_llm),\n",
    ")\n",
    "\n",
    "ak.run(flow, input=[{\"message\": \"Hello, world!\"}]).to_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b29e9d56-1e87-4654-845f-20b76d39faa3",
   "metadata": {},
   "source": [
    "Finally, caches are keyed by the system prompt used in the step when set explicitly, even if model initialization specifies a different system prompt."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff75adb5-4bdc-48bb-906d-efbda473ebe1",
   "metadata": {},
   "source": [
    "## Chat history\n",
    "\n",
    "Many real-world applications generate responses from a chat history, allowing them to reply to and use context from previous messages. In the context of red teaming, historized chats enable us to run multi-turn attacks, exposing potential vulnerabilities in a target system that would have been blocked in a single-turn attack. Check out the [Multi-turn Personas](../generating_challenges/multi_turn_personas.ipynb) notebook for a more detailed example of a multi-turn attack.\n",
    "\n",
    "ARTKIT implements historized chats via the `HistorizedChatModel`, a light-weight wrapper class for a `ChatModel`. The primary addition in the `HistorizedChatModel` is that both the user message and a `ChatHistory` are taken as inputs to generate a response. The `ChatHistory` is created and managed automatically, accounting for different roles and optionally truncating after a specified number of turns."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84cbc349-c9e6-44fd-bff4-a1659d6be762",
   "metadata": {},
   "source": [
    "We'll demonstrate with a historized version of our original `chat_llm` object. Note that this means the object now supports both caching and historization, with no change to its underlying functionality:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "be14d12e-2d23-4d23-b4b8-ef325e9232f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "historized_chat_llm = ak.HistorizedChatModel(chat_llm, max_history=5)\n",
    "\n",
    "async def get_joke(message: str, model: ak.ChatModel):\n",
    "    for response in await model.get_response(message=message):\n",
    "        yield {\"joke\": response}\n",
    "\n",
    "async def clarify_joke(model: ak.ChatModel):\n",
    "    # Note - our message does not specify what we want clarified; \n",
    "    #  this needs to be inferred from the chat history\n",
    "    for response in await model.get_response(message=\"Can you explain the joke?\"):\n",
    "        yield {\"clarification\": response}\n",
    "\n",
    "flow = ak.chain(\n",
    "    ak.step(\n",
    "        \"get_joke\", \n",
    "        get_joke, \n",
    "        model=historized_chat_llm.with_system_prompt(\"Give a short answer, and then follow with an appropriate joke\"),\n",
    "    ), \n",
    "    ak.step(\n",
    "        \"clarify_joke\",\n",
    "        clarify_joke,\n",
    "        model=historized_chat_llm.with_system_prompt(\"Don't use any markdown or emojis, and keep it short.\"),\n",
    "    ),\n",
    ")\n",
    "\n",
    "result = ak.run(flow, input=[{\"message\": \"Should I get a dog?\"}])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afcea18c-2493-452d-b88a-71dafca6952c",
   "metadata": {},
   "source": [
    "Our chatbot doesn't have a great sense of humor... but it does have a chat history, which allows it to clarify its earlier response. Note that we can use `with_system_prompt` to flexibly update the system prompt at different points within the chat; the LLM will always respond using the current system prompt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cde13077-10e2-4f2c-82bd-e973537dd0ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "User 🧑: Should I get a dog?\n",
      "\n",
      "Assistant 🤖: Yes, getting a dog can bring a lot of joy and companionship into your life.\n",
      "\n",
      "Why did the dog sit in the shade? Because he didn’t want to be a hot dog!\n",
      "\n",
      "User 🧑: Can you explain the joke?\n",
      "\n",
      "Assistant 🤖: Sure. The joke plays on the double meaning of \"hot dog.\" In one sense, it refers to a dog feeling hot from the sun. In the other sense, \"hot dog\" is a type of food. The humor comes from this wordplay.\n"
     ]
    }
   ],
   "source": [
    "# Display conversations\n",
    "for message in historized_chat_llm.history:\n",
    "    if message.role == \"user\":\n",
    "        print(f\"\\nUser 🧑: {message.text}\")\n",
    "    elif message.role == \"assistant\":\n",
    "        print(f\"\\nAssistant 🤖: {message.text}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "480a7a9f-e2e6-47ae-aa82-e54789d3b3ff",
   "metadata": {},
   "source": [
    "## Concluding remarks\n",
    "\n",
    "If you've made it to the end of this guide, you have now mastered several of the more nuanced aspects of ARTKIT -- if you have ideas for more features you'd like to implement, please consider [contributing](../../contributor_guide/index.rst)! "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
